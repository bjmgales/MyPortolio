import { useEffect, useState } from "react";

export default function Menu(props) {
    const [menuState, setMenuState] = useState(() =>
        props.items.reduce((acc, item, index) => {
            const key = `${item.title}#${index}`;
            acc[key] = { isClicked: false, className: '' };
            return acc;
        }, {})
    );

 const clickSwitch = (key, event) => {
    event.stopPropagation();
    setMenuState(prev => {
        const isCurrentlyClicked = prev[key].isClicked;
        return Object.keys(prev).reduce((acc, k) => {
            if (k === key) {
                if (!isCurrentlyClicked && prev[k].className !== 'submenu') {
                    acc[k] = { isClicked: true, className: 'open' };
                } else {
                    acc[k] = { isClicked: false, className: 'close' };
                }
            } else {
                acc[k] = { isClicked: false, className: '' };
            }
            return acc;
        }, {});
    });
};

    function handleAnimationEnd(key, event) {
        event.stopPropagation();
        setMenuState(prev => ({
            ...prev,
            [key] : {...prev[key], className: ""}
        }))
    }

    return (
        <div className="divDropdown">
            <ul id={props.id} className="dropdown">
                {props.items.map((item, index) => {
                    const key = `${item.title}#${index}`;
                    return (
                        <li className={props.className} key={key} onClick={(event) => clickSwitch(key, event)}
                         onAnimationEnd={(event) => handleAnimationEnd(key, event)}>
                            {item.title}
                            {item.submenu &&(
                                <Menu items={item.submenu}
                                    className={`submenu ${menuState[key].isClicked ? 'open' : menuState[key].className}`} />
                            )}
                        </li>
                    );
                })}
            </ul>
        </div>
    );
}
